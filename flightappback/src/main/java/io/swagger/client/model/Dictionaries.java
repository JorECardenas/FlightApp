/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AircraftEntry;
import io.swagger.client.model.CarrierEntry;
import io.swagger.client.model.CurrencyEntry;
import io.swagger.client.model.LocationEntry;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Dictionaries
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-05T13:16:41.117316-07:00[America/Hermosillo]")

public class Dictionaries {
  @SerializedName("aircraft")
  private AircraftEntry aircraft = null;

  @SerializedName("carriers")
  private CarrierEntry carriers = null;

  @SerializedName("currencies")
  private CurrencyEntry currencies = null;

  @SerializedName("locations")
  private LocationEntry locations = null;

  public Dictionaries aircraft(AircraftEntry aircraft) {
    this.aircraft = aircraft;
    return this;
  }

   /**
   * Get aircraft
   * @return aircraft
  **/
  @Schema(description = "")
  public AircraftEntry getAircraft() {
    return aircraft;
  }

  public void setAircraft(AircraftEntry aircraft) {
    this.aircraft = aircraft;
  }

  public Dictionaries carriers(CarrierEntry carriers) {
    this.carriers = carriers;
    return this;
  }

   /**
   * Get carriers
   * @return carriers
  **/
  @Schema(description = "")
  public CarrierEntry getCarriers() {
    return carriers;
  }

  public void setCarriers(CarrierEntry carriers) {
    this.carriers = carriers;
  }

  public Dictionaries currencies(CurrencyEntry currencies) {
    this.currencies = currencies;
    return this;
  }

   /**
   * Get currencies
   * @return currencies
  **/
  @Schema(description = "")
  public CurrencyEntry getCurrencies() {
    return currencies;
  }

  public void setCurrencies(CurrencyEntry currencies) {
    this.currencies = currencies;
  }

  public Dictionaries locations(LocationEntry locations) {
    this.locations = locations;
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @Schema(description = "")
  public LocationEntry getLocations() {
    return locations;
  }

  public void setLocations(LocationEntry locations) {
    this.locations = locations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dictionaries dictionaries = (Dictionaries) o;
    return Objects.equals(this.aircraft, dictionaries.aircraft) &&
        Objects.equals(this.carriers, dictionaries.carriers) &&
        Objects.equals(this.currencies, dictionaries.currencies) &&
        Objects.equals(this.locations, dictionaries.locations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aircraft, carriers, currencies, locations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dictionaries {\n");
    
    sb.append("    aircraft: ").append(toIndentedString(aircraft)).append("\n");
    sb.append("    carriers: ").append(toIndentedString(carriers)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
