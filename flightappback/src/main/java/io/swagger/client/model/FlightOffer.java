/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExtendedPrice;
import io.swagger.client.model.FlightOfferSource;
import io.swagger.client.model.Itineraries;
import io.swagger.client.model.PricingOptions;
import io.swagger.client.model.TravelerPricing;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * FlightOffer
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-05T13:16:41.117316-07:00[America/Hermosillo]")

@JsonIgnoreProperties
public class FlightOffer {
  @SerializedName("disablePricing")
  private Boolean disablePricing = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("instantTicketingRequired")
  private Boolean instantTicketingRequired = null;

  @SerializedName("itineraries")
  private List<Itineraries> itineraries = null;

  @SerializedName("lastTicketingDate")
  private String lastTicketingDate = null;

  @SerializedName("lastTicketingDateTime")
  private String lastTicketingDateTime = null;

  @SerializedName("nonHomogeneous")
  private Boolean nonHomogeneous = null;

  @SerializedName("numberOfBookableSeats")
  private BigDecimal numberOfBookableSeats = null;

  @SerializedName("oneWay")
  private Boolean oneWay = null;

  @SerializedName("paymentCardRequired")
  private Boolean paymentCardRequired = null;

  @SerializedName("price")
  private ExtendedPrice price = null;

  @SerializedName("pricingOptions")
  private PricingOptions pricingOptions = null;

  @SerializedName("source")
  private FlightOfferSource source = null;

  @SerializedName("travelerPricings")
  private List<TravelerPricing> travelerPricings = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("validatingAirlineCodes")
  private List<String> validatingAirlineCodes = null;

  public FlightOffer disablePricing(Boolean disablePricing) {
    this.disablePricing = disablePricing;
    return this;
  }

   /**
   * BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source \&quot;GDS\&quot;
   * @return disablePricing
  **/
  @Schema(example = "false", description = "BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source \"GDS\"")
  public Boolean isDisablePricing() {
    return disablePricing;
  }

  public void setDisablePricing(Boolean disablePricing) {
    this.disablePricing = disablePricing;
  }

  public FlightOffer id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id of the flight offer
   * @return id
  **/
  @Schema(example = "1", required = true, description = "Id of the flight offer")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public FlightOffer instantTicketingRequired(Boolean instantTicketingRequired) {
    this.instantTicketingRequired = instantTicketingRequired;
    return this;
  }

   /**
   * If true, inform that a ticketing will be required at booking step.
   * @return instantTicketingRequired
  **/
  @Schema(example = "false", description = "If true, inform that a ticketing will be required at booking step.")
  public Boolean isInstantTicketingRequired() {
    return instantTicketingRequired;
  }

  public void setInstantTicketingRequired(Boolean instantTicketingRequired) {
    this.instantTicketingRequired = instantTicketingRequired;
  }

  public FlightOffer itineraries(List<Itineraries> itineraries) {
    this.itineraries = itineraries;
    return this;
  }

  public FlightOffer addItinerariesItem(Itineraries itinerariesItem) {
    if (this.itineraries == null) {
      this.itineraries = new ArrayList<Itineraries>();
    }
    this.itineraries.add(itinerariesItem);
    return this;
  }

   /**
   * Get itineraries
   * @return itineraries
  **/
  @Schema(description = "")
  public List<Itineraries> getItineraries() {
    return itineraries;
  }

  public void setItineraries(List<Itineraries> itineraries) {
    this.itineraries = itineraries;
  }

  public FlightOffer lastTicketingDate(String lastTicketingDate) {
    this.lastTicketingDate = lastTicketingDate;
    return this;
  }

   /**
   * If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07
   * @return lastTicketingDate
  **/
  @Schema(example = "2018-06-19T00:00:00.000Z", description = "If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07")
  public String getLastTicketingDate() {
    return lastTicketingDate;
  }

  public void setLastTicketingDate(String lastTicketingDate) {
    this.lastTicketingDate = lastTicketingDate;
  }

  public FlightOffer nonHomogeneous(Boolean nonHomogeneous) {
    this.nonHomogeneous = nonHomogeneous;
    return this;
  }

   /**
   * If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)
   * @return nonHomogeneous
  **/
  @Schema(example = "false", description = "If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)")
  public Boolean isNonHomogeneous() {
    return nonHomogeneous;
  }

  public void setNonHomogeneous(Boolean nonHomogeneous) {
    this.nonHomogeneous = nonHomogeneous;
  }

  public FlightOffer numberOfBookableSeats(BigDecimal numberOfBookableSeats) {
    this.numberOfBookableSeats = numberOfBookableSeats;
    return this;
  }

   /**
   * Number of seats bookable in a single request. Can not be higher than 9.
   * minimum: 1
   * maximum: 9
   * @return numberOfBookableSeats
  **/
  @Schema(example = "9", description = "Number of seats bookable in a single request. Can not be higher than 9.")
  public BigDecimal getNumberOfBookableSeats() {
    return numberOfBookableSeats;
  }

  public void setNumberOfBookableSeats(BigDecimal numberOfBookableSeats) {
    this.numberOfBookableSeats = numberOfBookableSeats;
  }

  public FlightOffer oneWay(Boolean oneWay) {
    this.oneWay = oneWay;
    return this;
  }

   /**
   * If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.
   * @return oneWay
  **/
  @Schema(example = "false", description = "If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.")
  public Boolean isOneWay() {
    return oneWay;
  }

  public void setOneWay(Boolean oneWay) {
    this.oneWay = oneWay;
  }

  public FlightOffer paymentCardRequired(Boolean paymentCardRequired) {
    this.paymentCardRequired = paymentCardRequired;
    return this;
  }

   /**
   * If true, a payment card is mandatory to book this flight offer
   * @return paymentCardRequired
  **/
  @Schema(example = "false", description = "If true, a payment card is mandatory to book this flight offer")
  public Boolean isPaymentCardRequired() {
    return paymentCardRequired;
  }

  public void setPaymentCardRequired(Boolean paymentCardRequired) {
    this.paymentCardRequired = paymentCardRequired;
  }

  public FlightOffer price(ExtendedPrice price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @Schema(description = "")
  public ExtendedPrice getPrice() {
    return price;
  }

  public void setPrice(ExtendedPrice price) {
    this.price = price;
  }

  public FlightOffer pricingOptions(PricingOptions pricingOptions) {
    this.pricingOptions = pricingOptions;
    return this;
  }

   /**
   * Get pricingOptions
   * @return pricingOptions
  **/
  @Schema(description = "")
  public PricingOptions getPricingOptions() {
    return pricingOptions;
  }

  public void setPricingOptions(PricingOptions pricingOptions) {
    this.pricingOptions = pricingOptions;
  }

  public FlightOffer source(FlightOfferSource source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public FlightOfferSource getSource() {
    return source;
  }

  public void setSource(FlightOfferSource source) {
    this.source = source;
  }

  public FlightOffer travelerPricings(List<TravelerPricing> travelerPricings) {
    this.travelerPricings = travelerPricings;
    return this;
  }

  public FlightOffer addTravelerPricingsItem(TravelerPricing travelerPricingsItem) {
    if (this.travelerPricings == null) {
      this.travelerPricings = new ArrayList<TravelerPricing>();
    }
    this.travelerPricings.add(travelerPricingsItem);
    return this;
  }

   /**
   * Fare information for each traveler/segment
   * @return travelerPricings
  **/
  @Schema(description = "Fare information for each traveler/segment")
  public List<TravelerPricing> getTravelerPricings() {
    return travelerPricings;
  }

  public void setTravelerPricings(List<TravelerPricing> travelerPricings) {
    this.travelerPricings = travelerPricings;
  }

  public FlightOffer type(String type) {
    this.type = type;
    return this;
  }

   /**
   * the resource name
   * @return type
  **/
  @Schema(example = "flight-offer", required = true, description = "the resource name")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public FlightOffer validatingAirlineCodes(List<String> validatingAirlineCodes) {
    this.validatingAirlineCodes = validatingAirlineCodes;
    return this;
  }

  public FlightOffer addValidatingAirlineCodesItem(String validatingAirlineCodesItem) {
    if (this.validatingAirlineCodes == null) {
      this.validatingAirlineCodes = new ArrayList<String>();
    }
    this.validatingAirlineCodes.add(validatingAirlineCodesItem);
    return this;
  }

   /**
   * This option ensures that the system will only consider these airlines.
   * @return validatingAirlineCodes
  **/
  @Schema(example = "[\"AF\"]", description = "This option ensures that the system will only consider these airlines.")
  public List<String> getValidatingAirlineCodes() {
    return validatingAirlineCodes;
  }

  public void setValidatingAirlineCodes(List<String> validatingAirlineCodes) {
    this.validatingAirlineCodes = validatingAirlineCodes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlightOffer flightOffer = (FlightOffer) o;
    return Objects.equals(this.disablePricing, flightOffer.disablePricing) &&
        Objects.equals(this.id, flightOffer.id) &&
        Objects.equals(this.instantTicketingRequired, flightOffer.instantTicketingRequired) &&
        Objects.equals(this.itineraries, flightOffer.itineraries) &&
        Objects.equals(this.lastTicketingDate, flightOffer.lastTicketingDate) &&
        Objects.equals(this.nonHomogeneous, flightOffer.nonHomogeneous) &&
        Objects.equals(this.numberOfBookableSeats, flightOffer.numberOfBookableSeats) &&
        Objects.equals(this.oneWay, flightOffer.oneWay) &&
        Objects.equals(this.paymentCardRequired, flightOffer.paymentCardRequired) &&
        Objects.equals(this.price, flightOffer.price) &&
        Objects.equals(this.pricingOptions, flightOffer.pricingOptions) &&
        Objects.equals(this.source, flightOffer.source) &&
        Objects.equals(this.travelerPricings, flightOffer.travelerPricings) &&
        Objects.equals(this.type, flightOffer.type) &&
        Objects.equals(this.validatingAirlineCodes, flightOffer.validatingAirlineCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disablePricing, id, instantTicketingRequired, itineraries, lastTicketingDate, nonHomogeneous, numberOfBookableSeats, oneWay, paymentCardRequired, price, pricingOptions, source, travelerPricings, type, validatingAirlineCodes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlightOffer {\n");
    
    sb.append("    disablePricing: ").append(toIndentedString(disablePricing)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instantTicketingRequired: ").append(toIndentedString(instantTicketingRequired)).append("\n");
    sb.append("    itineraries: ").append(toIndentedString(itineraries)).append("\n");
    sb.append("    lastTicketingDate: ").append(toIndentedString(lastTicketingDate)).append("\n");
    sb.append("    nonHomogeneous: ").append(toIndentedString(nonHomogeneous)).append("\n");
    sb.append("    numberOfBookableSeats: ").append(toIndentedString(numberOfBookableSeats)).append("\n");
    sb.append("    oneWay: ").append(toIndentedString(oneWay)).append("\n");
    sb.append("    paymentCardRequired: ").append(toIndentedString(paymentCardRequired)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    pricingOptions: ").append(toIndentedString(pricingOptions)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    travelerPricings: ").append(toIndentedString(travelerPricings)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validatingAirlineCodes: ").append(toIndentedString(validatingAirlineCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
