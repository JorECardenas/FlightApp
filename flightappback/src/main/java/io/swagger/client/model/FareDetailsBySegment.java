/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.List;
import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AdditionalServicesRequest;
import io.swagger.client.model.AllotmentDetails;
import io.swagger.client.model.BaggageAllowance;
import io.swagger.client.model.SliceDiceIndicator;
import io.swagger.client.model.TravelClass;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Fare details of the segment
 */
@Schema(description = "Fare details of the segment")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-05T13:16:41.117316-07:00[America/Hermosillo]")

public class FareDetailsBySegment {
  @SerializedName("additionalServices")
  private AdditionalServicesRequest additionalServices = null;

  @SerializedName("allotmentDetails")
  private AllotmentDetails allotmentDetails = null;

  @SerializedName("brandedFare")
  private String brandedFare = null;

  @SerializedName("cabin")
  private TravelClass cabin = null;

  @SerializedName("class")
  private String propertyClass = null;

  @SerializedName("fareBasis")
  private String fareBasis = null;

  @SerializedName("includedCheckedBags")
  private BaggageAllowance includedCheckedBags = null;

  @SerializedName("isAllotment")
  private Boolean isAllotment = null;

  @SerializedName("segmentId")
  private String segmentId = null;

  @SerializedName("sliceDiceIndicator")
  private SliceDiceIndicator sliceDiceIndicator = null;

  @SerializedName("amenities")
  private List<Amenity> amenities = null;

  public FareDetailsBySegment additionalServices(AdditionalServicesRequest additionalServices) {
    this.additionalServices = additionalServices;
    return this;
  }

   /**
   * Get additionalServices
   * @return additionalServices
  **/
  @Schema(description = "")
  public AdditionalServicesRequest getAdditionalServices() {
    return additionalServices;
  }

  public void setAdditionalServices(AdditionalServicesRequest additionalServices) {
    this.additionalServices = additionalServices;
  }

  public FareDetailsBySegment allotmentDetails(AllotmentDetails allotmentDetails) {
    this.allotmentDetails = allotmentDetails;
    return this;
  }

   /**
   * Get allotmentDetails
   * @return allotmentDetails
  **/
  @Schema(description = "")
  public AllotmentDetails getAllotmentDetails() {
    return allotmentDetails;
  }

  public void setAllotmentDetails(AllotmentDetails allotmentDetails) {
    this.allotmentDetails = allotmentDetails;
  }

  public FareDetailsBySegment brandedFare(String brandedFare) {
    this.brandedFare = brandedFare;
    return this;
  }

   /**
   * The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled
   * @return brandedFare
  **/
  @Schema(example = "LIGHTONE", description = "The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled")
  public String getBrandedFare() {
    return brandedFare;
  }

  public void setBrandedFare(String brandedFare) {
    this.brandedFare = brandedFare;
  }

  public FareDetailsBySegment cabin(TravelClass cabin) {
    this.cabin = cabin;
    return this;
  }

   /**
   * Get cabin
   * @return cabin
  **/
  @Schema(description = "")
  public TravelClass getCabin() {
    return cabin;
  }

  public void setCabin(TravelClass cabin) {
    this.cabin = cabin;
  }

  public FareDetailsBySegment propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)
   * @return propertyClass
  **/
  @Schema(example = "A", description = "The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)")
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }

  public FareDetailsBySegment fareBasis(String fareBasis) {
    this.fareBasis = fareBasis;
    return this;
  }

   /**
   * Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.
   * @return fareBasis
  **/
  @Schema(example = "ANNNNF4K", description = "Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.")
  public String getFareBasis() {
    return fareBasis;
  }

  public void setFareBasis(String fareBasis) {
    this.fareBasis = fareBasis;
  }

  public FareDetailsBySegment includedCheckedBags(BaggageAllowance includedCheckedBags) {
    this.includedCheckedBags = includedCheckedBags;
    return this;
  }

   /**
   * Get includedCheckedBags
   * @return includedCheckedBags
  **/
  @Schema(description = "")
  public BaggageAllowance getIncludedCheckedBags() {
    return includedCheckedBags;
  }

  public void setIncludedCheckedBags(BaggageAllowance includedCheckedBags) {
    this.includedCheckedBags = includedCheckedBags;
  }

  public FareDetailsBySegment isAllotment(Boolean isAllotment) {
    this.isAllotment = isAllotment;
    return this;
  }

   /**
   * True if the corresponding booking class is in an allotment
   * @return isAllotment
  **/
  @Schema(example = "true", description = "True if the corresponding booking class is in an allotment")
  public Boolean isIsAllotment() {
    return isAllotment;
  }

  public void setIsAllotment(Boolean isAllotment) {
    this.isAllotment = isAllotment;
  }

  public FareDetailsBySegment segmentId(String segmentId) {
    this.segmentId = segmentId;
    return this;
  }

   /**
   * Id of the segment
   * @return segmentId
  **/
  @Schema(example = "1", required = true, description = "Id of the segment")
  public String getSegmentId() {
    return segmentId;
  }

  public void setSegmentId(String segmentId) {
    this.segmentId = segmentId;
  }

  public FareDetailsBySegment sliceDiceIndicator(SliceDiceIndicator sliceDiceIndicator) {
    this.sliceDiceIndicator = sliceDiceIndicator;
    return this;
  }

   /**
   * Get sliceDiceIndicator
   * @return sliceDiceIndicator
  **/
  @Schema(description = "")
  public SliceDiceIndicator getSliceDiceIndicator() {
    return sliceDiceIndicator;
  }

  public void setSliceDiceIndicator(SliceDiceIndicator sliceDiceIndicator) {
    this.sliceDiceIndicator = sliceDiceIndicator;
  }

  /**
   * Get amenity list
   * @return amenities
   **/
  public List<Amenity> getAmenities(){ return amenities; }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FareDetailsBySegment fareDetailsBySegment = (FareDetailsBySegment) o;
    return Objects.equals(this.additionalServices, fareDetailsBySegment.additionalServices) &&
        Objects.equals(this.allotmentDetails, fareDetailsBySegment.allotmentDetails) &&
        Objects.equals(this.brandedFare, fareDetailsBySegment.brandedFare) &&
        Objects.equals(this.cabin, fareDetailsBySegment.cabin) &&
        Objects.equals(this.propertyClass, fareDetailsBySegment.propertyClass) &&
        Objects.equals(this.fareBasis, fareDetailsBySegment.fareBasis) &&
        Objects.equals(this.includedCheckedBags, fareDetailsBySegment.includedCheckedBags) &&
        Objects.equals(this.isAllotment, fareDetailsBySegment.isAllotment) &&
        Objects.equals(this.segmentId, fareDetailsBySegment.segmentId) &&
        Objects.equals(this.sliceDiceIndicator, fareDetailsBySegment.sliceDiceIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalServices, allotmentDetails, brandedFare, cabin, propertyClass, fareBasis, includedCheckedBags, isAllotment, segmentId, sliceDiceIndicator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FareDetailsBySegment {\n");
    
    sb.append("    additionalServices: ").append(toIndentedString(additionalServices)).append("\n");
    sb.append("    allotmentDetails: ").append(toIndentedString(allotmentDetails)).append("\n");
    sb.append("    brandedFare: ").append(toIndentedString(brandedFare)).append("\n");
    sb.append("    cabin: ").append(toIndentedString(cabin)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    fareBasis: ").append(toIndentedString(fareBasis)).append("\n");
    sb.append("    includedCheckedBags: ").append(toIndentedString(includedCheckedBags)).append("\n");
    sb.append("    isAllotment: ").append(toIndentedString(isAllotment)).append("\n");
    sb.append("    segmentId: ").append(toIndentedString(segmentId)).append("\n");
    sb.append("    sliceDiceIndicator: ").append(toIndentedString(sliceDiceIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
