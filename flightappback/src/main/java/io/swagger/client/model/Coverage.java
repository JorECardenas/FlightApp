/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.v3.oas.annotations.media.Schema;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * part of the trip covered by the travel class restriction (ALL_SEGMENTS if ommited)
 */
@JsonAdapter(Coverage.Adapter.class)
public enum Coverage {
  @SerializedName("MOST_SEGMENTS")
  MOST_SEGMENTS("MOST_SEGMENTS"),
  @SerializedName("AT_LEAST_ONE_SEGMENT")
  AT_LEAST_ONE_SEGMENT("AT_LEAST_ONE_SEGMENT"),
  @SerializedName("ALL_SEGMENTS")
  ALL_SEGMENTS("ALL_SEGMENTS");

  private String value;

  Coverage(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Coverage fromValue(String input) {
    for (Coverage b : Coverage.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<Coverage> {
    @Override
    public void write(final JsonWriter jsonWriter, final Coverage enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public Coverage read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return Coverage.fromValue((String)(value));
    }
  }
}
