/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AircraftEquipment;
import io.swagger.client.model.Co2Emission;
import io.swagger.client.model.FlightEndPoint;
import io.swagger.client.model.FlightSegment;
import io.swagger.client.model.FlightStop;
import io.swagger.client.model.OperatingFlight;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Segment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-05T13:16:41.117316-07:00[America/Hermosillo]")

public class Segment {
  @SerializedName("blacklistedInEU")
  private Boolean blacklistedInEU = null;

  @SerializedName("co2Emissions")
  private List<Co2Emission> co2Emissions = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("numberOfStops")
  private Integer numberOfStops = null;

  @SerializedName("aircraft")
  private AircraftEquipment aircraft = null;

  @SerializedName("arrival")
  private FlightEndPoint arrival = null;

  @SerializedName("carrierCode")
  private String carrierCode = null;

  @SerializedName("departure")
  private FlightEndPoint departure = null;

  @SerializedName("duration")
  private String duration = null;

  @SerializedName("number")
  private String number = null;

  @SerializedName("operating")
  private OperatingFlight operating = null;

  @SerializedName("stops")
  private List<FlightStop> stops = null;

  public Segment blacklistedInEU(Boolean blacklistedInEU) {
    this.blacklistedInEU = blacklistedInEU;
    return this;
  }

   /**
   * When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    
   * @return blacklistedInEU
  **/
  @Schema(example = "false", description = "When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    ")
  public Boolean isBlacklistedInEU() {
    return blacklistedInEU;
  }

  public void setBlacklistedInEU(Boolean blacklistedInEU) {
    this.blacklistedInEU = blacklistedInEU;
  }

  public Segment co2Emissions(List<Co2Emission> co2Emissions) {
    this.co2Emissions = co2Emissions;
    return this;
  }

  public Segment addCo2EmissionsItem(Co2Emission co2EmissionsItem) {
    if (this.co2Emissions == null) {
      this.co2Emissions = new ArrayList<Co2Emission>();
    }
    this.co2Emissions.add(co2EmissionsItem);
    return this;
  }

   /**
   * Co2 informations
   * @return co2Emissions
  **/
  @Schema(description = "Co2 informations")
  public List<Co2Emission> getCo2Emissions() {
    return co2Emissions;
  }

  public void setCo2Emissions(List<Co2Emission> co2Emissions) {
    this.co2Emissions = co2Emissions;
  }

  public Segment id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id of the segment
   * @return id
  **/
  @Schema(example = "1", description = "Id of the segment")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Segment numberOfStops(Integer numberOfStops) {
    this.numberOfStops = numberOfStops;
    return this;
  }

   /**
   * Number of stops
   * @return numberOfStops
  **/
  @Schema(example = "0", description = "Number of stops")
  public Integer getNumberOfStops() {
    return numberOfStops;
  }

  public void setNumberOfStops(Integer numberOfStops) {
    this.numberOfStops = numberOfStops;
  }

  public Segment aircraft(AircraftEquipment aircraft) {
    this.aircraft = aircraft;
    return this;
  }

   /**
   * Get aircraft
   * @return aircraft
  **/
  @Schema(description = "")
  public AircraftEquipment getAircraft() {
    return aircraft;
  }

  public void setAircraft(AircraftEquipment aircraft) {
    this.aircraft = aircraft;
  }

  public Segment arrival(FlightEndPoint arrival) {
    this.arrival = arrival;
    return this;
  }

   /**
   * Get arrival
   * @return arrival
  **/
  @Schema(description = "")
  public FlightEndPoint getArrival() {
    return arrival;
  }

  public void setArrival(FlightEndPoint arrival) {
    this.arrival = arrival;
  }

  public Segment carrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

   /**
   * providing the airline / carrier code
   * @return carrierCode
  **/
  @Schema(example = "DL", description = "providing the airline / carrier code")
  public String getCarrierCode() {
    return carrierCode;
  }

  public void setCarrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
  }

  public Segment departure(FlightEndPoint departure) {
    this.departure = departure;
    return this;
  }

   /**
   * Get departure
   * @return departure
  **/
  @Schema(description = "")
  public FlightEndPoint getDeparture() {
    return departure;
  }

  public void setDeparture(FlightEndPoint departure) {
    this.departure = departure;
  }

  public Segment duration(String duration) {
    this.duration = duration;
    return this;
  }

   /**
   * stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
   * @return duration
  **/
  @Schema(example = "PT2H10M", description = "stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M")
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }

  public Segment number(String number) {
    this.number = number;
    return this;
  }

   /**
   * the flight number as assigned by the carrier
   * @return number
  **/
  @Schema(example = "212", description = "the flight number as assigned by the carrier")
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }

  public Segment operating(OperatingFlight operating) {
    this.operating = operating;
    return this;
  }

   /**
   * Get operating
   * @return operating
  **/
  @Schema(description = "")
  public OperatingFlight getOperating() {
    return operating;
  }

  public void setOperating(OperatingFlight operating) {
    this.operating = operating;
  }

  public Segment stops(List<FlightStop> stops) {
    this.stops = stops;
    return this;
  }

  public Segment addStopsItem(FlightStop stopsItem) {
    if (this.stops == null) {
      this.stops = new ArrayList<FlightStop>();
    }
    this.stops.add(stopsItem);
    return this;
  }

   /**
   * information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...
   * @return stops
  **/
  @Schema(description = "information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...")
  public List<FlightStop> getStops() {
    return stops;
  }

  public void setStops(List<FlightStop> stops) {
    this.stops = stops;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Segment segment = (Segment) o;
    return Objects.equals(this.blacklistedInEU, segment.blacklistedInEU) &&
        Objects.equals(this.co2Emissions, segment.co2Emissions) &&
        Objects.equals(this.id, segment.id) &&
        Objects.equals(this.numberOfStops, segment.numberOfStops) &&
        Objects.equals(this.aircraft, segment.aircraft) &&
        Objects.equals(this.arrival, segment.arrival) &&
        Objects.equals(this.carrierCode, segment.carrierCode) &&
        Objects.equals(this.departure, segment.departure) &&
        Objects.equals(this.duration, segment.duration) &&
        Objects.equals(this.number, segment.number) &&
        Objects.equals(this.operating, segment.operating) &&
        Objects.equals(this.stops, segment.stops);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blacklistedInEU, co2Emissions, id, numberOfStops, aircraft, arrival, carrierCode, departure, duration, number, operating, stops);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Segment {\n");
    
    sb.append("    blacklistedInEU: ").append(toIndentedString(blacklistedInEU)).append("\n");
    sb.append("    co2Emissions: ").append(toIndentedString(co2Emissions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    numberOfStops: ").append(toIndentedString(numberOfStops)).append("\n");
    sb.append("    aircraft: ").append(toIndentedString(aircraft)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    operating: ").append(toIndentedString(operating)).append("\n");
    sb.append("    stops: ").append(toIndentedString(stops)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
