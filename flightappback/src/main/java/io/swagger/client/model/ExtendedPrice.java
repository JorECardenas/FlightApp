/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AdditionalService;
import io.swagger.client.model.Fee;
import io.swagger.client.model.Price;
import io.swagger.client.model.Tax;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * price information
 */
@Schema(description = "price information")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-05T13:16:41.117316-07:00[America/Hermosillo]")

public class ExtendedPrice {
  @SerializedName("additionalServices")
  private List<AdditionalService> additionalServices = null;

  @SerializedName("billingCurrency")
  private String billingCurrency = null;

  @SerializedName("grandTotal")
  private String grandTotal = null;

  @SerializedName("margin")
  private String margin = null;

  @SerializedName("base")
  private String base = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("fees")
  private List<Fee> fees = null;

  @SerializedName("refundableTaxes")
  private String refundableTaxes = null;

  @SerializedName("taxes")
  private List<Tax> taxes = null;

  @SerializedName("total")
  private String total = null;

  public ExtendedPrice additionalServices(List<AdditionalService> additionalServices) {
    this.additionalServices = additionalServices;
    return this;
  }

  public ExtendedPrice addAdditionalServicesItem(AdditionalService additionalServicesItem) {
    if (this.additionalServices == null) {
      this.additionalServices = new ArrayList<AdditionalService>();
    }
    this.additionalServices.add(additionalServicesItem);
    return this;
  }

   /**
   * Get additionalServices
   * @return additionalServices
  **/
  @Schema(description = "")
  public List<AdditionalService> getAdditionalServices() {
    return additionalServices;
  }

  public void setAdditionalServices(List<AdditionalService> additionalServices) {
    this.additionalServices = additionalServices;
  }

  public ExtendedPrice billingCurrency(String billingCurrency) {
    this.billingCurrency = billingCurrency;
    return this;
  }

   /**
   * Currency of the payment. It may be different than the requested currency
   * @return billingCurrency
  **/
  @Schema(example = "EUR", description = "Currency of the payment. It may be different than the requested currency")
  public String getBillingCurrency() {
    return billingCurrency;
  }

  public void setBillingCurrency(String billingCurrency) {
    this.billingCurrency = billingCurrency;
  }

  public ExtendedPrice grandTotal(String grandTotal) {
    this.grandTotal = grandTotal;
    return this;
  }

   /**
   * Total amount paid by the user (including fees and selected additional services).
   * @return grandTotal
  **/
  @Schema(example = "987.00", description = "Total amount paid by the user (including fees and selected additional services).")
  public String getGrandTotal() {
    return grandTotal;
  }

  public void setGrandTotal(String grandTotal) {
    this.grandTotal = grandTotal;
  }

  public ExtendedPrice margin(String margin) {
    this.margin = margin;
    return this;
  }

   /**
   * BOOK step ONLY - The price margin percentage (plus or minus) that the booking can tolerate. When set to 0, then no price magin is tolerated.
   * @return margin
  **/
  @Schema(example = "1.00", description = "BOOK step ONLY - The price margin percentage (plus or minus) that the booking can tolerate. When set to 0, then no price magin is tolerated.")
  public String getMargin() {
    return margin;
  }

  public void setMargin(String margin) {
    this.margin = margin;
  }

  public ExtendedPrice base(String base) {
    this.base = base;
    return this;
  }

   /**
   * Amount without taxes
   * @return base
  **/
  @Schema(example = "632.70", description = "Amount without taxes")
  public String getBase() {
    return base;
  }

  public void setBase(String base) {
    this.base = base;
  }

  public ExtendedPrice currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @Schema(example = "USD", description = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public ExtendedPrice fees(List<Fee> fees) {
    this.fees = fees;
    return this;
  }

  public ExtendedPrice addFeesItem(Fee feesItem) {
    if (this.fees == null) {
      this.fees = new ArrayList<Fee>();
    }
    this.fees.add(feesItem);
    return this;
  }

   /**
   * List of applicable fees
   * @return fees
  **/
  @Schema(description = "List of applicable fees")
  public List<Fee> getFees() {
    return fees;
  }

  public void setFees(List<Fee> fees) {
    this.fees = fees;
  }

  public ExtendedPrice refundableTaxes(String refundableTaxes) {
    this.refundableTaxes = refundableTaxes;
    return this;
  }

   /**
   * The amount of taxes which are refundable
   * @return refundableTaxes
  **/
  @Schema(example = "200.00", description = "The amount of taxes which are refundable")
  public String getRefundableTaxes() {
    return refundableTaxes;
  }

  public void setRefundableTaxes(String refundableTaxes) {
    this.refundableTaxes = refundableTaxes;
  }

  public ExtendedPrice taxes(List<Tax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public ExtendedPrice addTaxesItem(Tax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<Tax>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @Schema(description = "")
  public List<Tax> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<Tax> taxes) {
    this.taxes = taxes;
  }

  public ExtendedPrice total(String total) {
    this.total = total;
    return this;
  }

   /**
   * Total amount paid by the user
   * @return total
  **/
  @Schema(example = "932.70", description = "Total amount paid by the user")
  public String getTotal() {
    return total;
  }

  public void setTotal(String total) {
    this.total = total;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedPrice extendedPrice = (ExtendedPrice) o;
    return Objects.equals(this.additionalServices, extendedPrice.additionalServices) &&
        Objects.equals(this.billingCurrency, extendedPrice.billingCurrency) &&
        Objects.equals(this.grandTotal, extendedPrice.grandTotal) &&
        Objects.equals(this.margin, extendedPrice.margin) &&
        Objects.equals(this.base, extendedPrice.base) &&
        Objects.equals(this.currency, extendedPrice.currency) &&
        Objects.equals(this.fees, extendedPrice.fees) &&
        Objects.equals(this.refundableTaxes, extendedPrice.refundableTaxes) &&
        Objects.equals(this.taxes, extendedPrice.taxes) &&
        Objects.equals(this.total, extendedPrice.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalServices, billingCurrency, grandTotal, margin, base, currency, fees, refundableTaxes, taxes, total);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedPrice {\n");
    
    sb.append("    additionalServices: ").append(toIndentedString(additionalServices)).append("\n");
    sb.append("    billingCurrency: ").append(toIndentedString(billingCurrency)).append("\n");
    sb.append("    grandTotal: ").append(toIndentedString(grandTotal)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    refundableTaxes: ").append(toIndentedString(refundableTaxes)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
